<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>CSV Barcode Generator</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.4.1/papaparse.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/jsbarcode@3.11.5/dist/JsBarcode.all.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <style>
    body { font-family: sans-serif; padding: 2rem; max-width: 1000px; margin: auto; }
    .barcode-container { display: flex; flex-wrap: wrap; gap: 1rem; }
    .barcode-card {
      border: 1px solid #ccc;
      padding: 1rem;
      text-align: center;
      width: calc(33.333% - 1rem);
      box-sizing: border-box;
      word-wrap: break-word;
    }
    canvas {
      display: block;
      margin: auto;
      max-width: 100%;
      height: auto;
    }
    button { padding: 0.5rem 1rem; margin-top: 1rem; }
  </style>
</head>
<body>
  <h1>CSV Barcode Generator</h1>
  <label for="csv-upload">Upload CSV with T&T Column</label>
  <input type="file" id="csv-upload" accept=".csv" />
  <div id="actions" style="display:none;">
    <button onclick="downloadPDF()">Print list!</button>
  </div>
  <div id="barcodes" class="barcode-container"></div>

  <script>
    let currentBarcodes = [];

    document.getElementById('csv-upload').addEventListener('change', function(e) {
      const file = e.target.files[0];
      if (!file) return;

      Papa.parse(file, {
        header: true,
        complete: function(results) {
          const barcodes = results.data.map(row => row['T&T']).filter(Boolean);
          currentBarcodes = barcodes;

          const container = document.getElementById('barcodes');
          container.innerHTML = '';

          barcodes.forEach((code, i) => {
            const card = document.createElement('div');
            card.className = 'barcode-card';
            const canvas = document.createElement('canvas');
            canvas.id = `barcode-${i}`;
            const label = document.createElement('div');
            label.textContent = code;
            card.appendChild(canvas);
            card.appendChild(label);
            container.appendChild(card);
            JsBarcode(canvas, code, { format: 'CODE128', width: 2, height: 50, displayValue: false });
          });

          document.getElementById('actions').style.display = 'block';
        }
      });
    });

    async function downloadPDF() {
      const { jsPDF } = window.jspdf;
      const pdf = new jsPDF();
      const perRow = 2;
      const barcodeWidth = 75;
      const barcodeHeight = 10;
      const containerPadding = 5;
      const containerWidth = barcodeWidth + containerPadding * 2;
      const containerHeight = barcodeHeight + 15;
      const marginX = 15;
      const marginY = 15;
      const rowHeight = containerHeight + 5;
      const pageHeight = 297;

      await new Promise(resolve => setTimeout(resolve, 500));

      let rowOnPage = 0;
      pdf.setFontSize(12);

      for (let i = 0; i < currentBarcodes.length; i++) {
        const code = currentBarcodes[i];
        const canvas = document.getElementById(`barcode-${i}`);
        if (canvas) {
          const imgData = canvas.toDataURL("image/png");

          const col = i % perRow;
          let x = marginX + col * (containerWidth + marginX);
          let y = marginY + rowOnPage * rowHeight;

          if (y + containerHeight > pageHeight - marginY) {
            pdf.addPage();
            rowOnPage = 0;
            y = marginY;
          }

          // Container
          pdf.setDrawColor(180);
          pdf.setLineWidth(0.2);
          pdf.rect(x, y, containerWidth, containerHeight);

          // Barcode
          pdf.addImage(imgData, "PNG", x + containerPadding, y + containerPadding, barcodeWidth, barcodeHeight);

          // T&T tekst gecentreerd onder barcode
          const textY = y + containerPadding + barcodeHeight + 8;
          const textWidth = pdf.getTextWidth(code);
          const textX = x + (containerWidth - textWidth) / 2;
          pdf.text(code, textX, textY);

          if (col === perRow - 1) {
            rowOnPage++;
          }
        }
      }

      const today = new Date().toISOString().split('T')[0];
      pdf.autoPrint();
	window.open(pdf.output('bloburl'), '_blank');
    }
  </script>
</body>
</html>
